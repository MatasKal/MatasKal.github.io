{"version":3,"sources":["components/TableSorterDir.js","components/Loader.js","App.js","components/TableSorter.js","serviceWorker.js","index.js"],"names":["TableSorterDir","fieldIndex","sortedFieldDir","sortedField","headerActivity","Loader","id","className","this","props","visible","React","Component","App","getDataFromApi","bind","state","names","technologies","urls","dates","ages","loadedNames","loadedTech","loadedDates","loaderVisible","setState","fetch","then","response","json","result","calculateAge","agesArr","today","Date","yearToday","getFullYear","monthToday","getMonth","dayToday","getDate","map","name","toString","Promise","all","url","date","yearEnd","monthEnd","dayEnd","dateNow","splitBirth","Birth","split","yearBirth","parseInt","monthBirth","dayBirth","Death","splitDeath","sortedRows","tableData","sortingDirection","sortedData","sort","a","b","TableSorter","_","i","onClick","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e26551e.chunk.js","sourcesContent":["export default function TableSorterDir(fieldIndex, sortedFieldDir) {\r\n\r\n    if (sortedFieldDir === 'ascending') {\r\n        return { sortedField: fieldIndex, sortedFieldDir: 'descending', headerActivity: 'arrow-down' };\r\n      }\r\n      else if (sortedFieldDir === 'descending') {\r\n        return { sortedField: fieldIndex, sortedFieldDir: 'normal', headerActivity: '' };\r\n      }\r\n      else {\r\n        return { sortedField: fieldIndex, sortedFieldDir: 'ascending', headerActivity: 'arrow-up' };\r\n      }\r\n   \r\n\r\n}","import React from \"react\";\r\n\r\nexport default class Loader extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"loading-front\" className={this.props.visible} ></div>\r\n                <div id=\"loading-back\"  className={this.props.visible} ></div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport TableSorter from './components/TableSorter';\r\nimport TableSorterDir from './components/TableSorterDir';\r\nimport Loader from './components/Loader';\r\n\r\nconst NAME_API = 'http://78.63.13.74:3006/FlowFormaAPI/names';\r\nconst TECH_API = 'http://78.63.13.74:3006/FlowFormaAPI/tech';\r\nconst DATE_API = 'http://78.63.13.74:3006/FlowFormaAPI/getdate/';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.getDataFromApi = this.getDataFromApi.bind(this);\r\n    this.state = {\r\n      names: [],\r\n      technologies: [],\r\n      urls: [],\r\n      dates: [],\r\n      ages: [],\r\n\r\n      sortedField: null,\r\n      sortedFieldDir: 'ascending',\r\n      headerActivity: '',\r\n\r\n      loadedNames: \"false\",\r\n      loadedTech: \"false\",\r\n      loadedDates: \"false\",\r\n\r\n      loaderVisible: '',\r\n    }\r\n  }\r\n\r\n  getDataFromApi() {\r\n    if (this.state.loadedNames === \"false\" || \"loaded\") {\r\n      this.setState({ loadedNames: \"loading\", loaderVisible: 'show' });\r\n      fetch(NAME_API)\r\n        .then(response => response.json())\r\n        .then((result) => {\r\n          this.setState({ names: result, loadedNames: \"loaded\" }, () => {\r\n            this.calculateAge();\r\n          })\r\n        });\r\n    }\r\n\r\n    if (this.state.loadedTech === \"false\" || \"loaded\") {\r\n      this.setState({ loadedTech: \"loading\", loaderVisible: 'show' });\r\n      fetch(TECH_API)\r\n        .then(response => response.json())\r\n        .then((result) => { this.setState({ technologies: result, loadedTech: \"loaded\" }) });\r\n    }\r\n  }\r\n\r\n  async calculateAge() {\r\n\r\n    let { urls } = this.state;\r\n\r\n    let age;\r\n\r\n    let agesArr = [];\r\n    let today = new Date();\r\n    let yearToday = today.getFullYear();\r\n    let monthToday = today.getMonth() + 1;\r\n    let dayToday = today.getDate();\r\n\r\n    if (this.state.loadedDates === \"false\" || \"loaded\") {\r\n      this.setState({ loadedDates: \"loading\" });\r\n      urls = this.state.names.map(name => DATE_API + name.toString());\r\n    }\r\n\r\n    await Promise.all(urls.map(url =>\r\n      fetch(url)\r\n        .then(response => response.json())))\r\n      .then(dates => this.setState({ dates, loadedDates: \"loaded\", loaderVisible: '' }));\r\n\r\n    agesArr = this.state.dates.map(date => {\r\n      let dateNow = date;\r\n\r\n      let yearEnd, monthEnd, dayEnd;\r\n\r\n      let splitBirth = dateNow.Birth.split(\"-\");\r\n      let yearBirth = parseInt(splitBirth[0]);\r\n      let monthBirth = parseInt(splitBirth[1]);\r\n      let dayBirth = parseInt(splitBirth[2]);\r\n\r\n      if (dateNow.Death !== null) {\r\n        let splitDeath = dateNow.Death.split(\"-\");\r\n        yearEnd = parseInt(splitDeath[0]);\r\n        monthEnd = parseInt(splitDeath[1]);\r\n        dayEnd = parseInt(splitDeath[2]);\r\n      }\r\n      else {\r\n        yearEnd = yearToday;\r\n        monthEnd = monthToday;\r\n        dayEnd = dayToday;\r\n      }\r\n\r\n      if (yearEnd >= yearBirth) {\r\n        if (yearEnd === yearBirth) {\r\n          age = 0;\r\n        }\r\n        else if ((monthEnd < monthBirth) || (monthEnd === monthBirth && dayEnd < dayBirth)) {\r\n          age = yearEnd - yearBirth - 1;\r\n        }\r\n        else {\r\n          age = yearEnd - yearBirth;\r\n        }\r\n      }\r\n      else {\r\n        age = \"Invalid Dates. Please check!\"\r\n      }\r\n\r\n      return age;\r\n    });\r\n\r\n    this.setState({ ages: agesArr });\r\n  }\r\n\r\n  render() {\r\n    const { names } = this.state;\r\n    const { technologies } = this.state;\r\n    const { loadedNames } = this.state;\r\n    const { loadedTech } = this.state;\r\n    const { loadedDates } = this.state;\r\n    const { ages } = this.state;\r\n    const { sortedField } = this.state;\r\n    const { sortedFieldDir } = this.state;\r\n    const { headerActivity } = this.state;\r\n    const { loaderVisible } = this.state;\r\n\r\n\r\n    let rowTable = names.map((_, i) =>\r\n      [\r\n        loadedNames === \"loading\" ? \"Loading...\" : names[i],\r\n        loadedTech === \"loading\" ? \"Loading...\" : technologies[i],\r\n        loadedDates === \"loading\" ? \"Loading...\" : ages[i]\r\n      ]);\r\n\r\n    let sortedRows = TableSorter(rowTable, sortedFieldDir, sortedField);\r\n\r\n    return (\r\n      <div>\r\n        <Loader visible={loaderVisible} />\r\n        <button id=\"populate-button\" onClick={() => {\r\n          this.getDataFromApi();\r\n          this.setState({ sortedField: null, sortedFieldDir: 'normal' });\r\n        }}>Populate table</button>\r\n        <table id=\"people-list\">\r\n          <thead><tr>\r\n            <th key={\"nameHeader\"} className={sortedField === 0 ? headerActivity : \"\"} onClick={() => this.setState(TableSorterDir(0, sortedFieldDir))}>Name</th>\r\n            <th key={\"techHeader\"} className={sortedField === 1 ? headerActivity : \"\"} onClick={() => this.setState(TableSorterDir(1, sortedFieldDir))}>Tech</th>\r\n            <th key={\"ageHeader\"} className={sortedField === 2 ? headerActivity : \"\"} onClick={() => this.setState(TableSorterDir(2, sortedFieldDir))}>Age</th>\r\n          </tr></thead>\r\n          <tbody>\r\n            {sortedRows.map((sortedRows, i) => {\r\n              return (\r\n                <tr key={names[i]}>\r\n                  <td key={names[i].toString() + \" name\"}>{sortedRows[0]}</td>\r\n                  <td key={names[i].toString() + \" tech\"}>{sortedRows[1]}</td>\r\n                  <td key={names[i].toString() + \" age\"}>{sortedRows[2]}</td>\r\n                </tr>);\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","export default function TableSorter(tableData, sortingDirection, sortedField) {\r\n\r\n    let sortedData = tableData;\r\n\r\n    if (sortedField !== null) {\r\n        sortedData.sort((a, b) => {\r\n          if (a[sortedField] < b[sortedField]) {\r\n            if (sortingDirection === 'ascending') {\r\n              return -1;\r\n            }\r\n            else if (sortingDirection === 'descending') {\r\n              return 1;\r\n            }\r\n            else {\r\n              return 0;\r\n            }\r\n          }\r\n          if (a[sortedField] > b[sortedField]) {\r\n            if (sortingDirection === 'ascending') {\r\n              return 1;\r\n            }\r\n            else if (sortingDirection === 'descending') {\r\n              return -1;\r\n            }\r\n            else {\r\n              return 0;\r\n            }\r\n          }\r\n          return 0;\r\n        });\r\n      }\r\n   \r\n    return sortedData;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}